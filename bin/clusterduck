#!/usr/bin/env node
(async function () {

    const daemonizeProcess = require('daemonize-process')
    const pidFileClass = require('../src/misc/pid-file')
    const md5 = require('md5')
    const yaml = require('js-yaml')

    const yargs = require('yargs');

    let command;

    yargs.option('daemonize', {
        alias: 'd',
        description: 'Daemonize',
        type: 'boolean',
    })
        .option('config-file', {
            alias: 'f',
            default: '/etc/clusterduck.yaml',
            description: 'Daemonize',
            type: 'string',
        }).option('pid-file', {
        description: 'Pid-file',
        default: function () {
            return '/var/run/clusterduck/clusterduck-' + md5(yargs.argv.configFile) + '.pid'
        },
        type: 'string',
    })
        .option('verbose', {
            alias: 'v',
            description: 'Verbosity devel',
            type: 'string',
        })
        .command('export', 'export', (yargs) => {
            command = function (clusterduck) {
                return new Promise(async (resolve, reject) => {
                    const [remote, d] = await clusterduck.dnode.client()
                    const res = await remote.export();//.catch(reject)
                    process.stdout.write(yaml.dump(res));
                    d.end()
                })
            }
        })
        .command('stop', 'stop the server', (yargs) => {
        }, (argv) => {
            command = (clusterduck) => {
                new Promise((resolve, reject) => {
                    if (argv.verbose) console.info(`stop server`)
                    const pid = new pidFileClass(argv.pidFile)
                    try {
                        pid.stop()
                    } catch (err) {
                        console.error(argv.verbose ? err : err.message)
                    }
                    resolve()
                });
            };
        })
        .help()
        .alias('help', 'h');
    const argv = yargs.argv;

    try {
        if (argv.daemonize) {
            const pid = new pidFileClass(argv.pidFile);
            pid.acquireOrThrow()
            daemonizeProcess()
            if (argv.verbose) {
                console.log('[INFO] An instance has just started. PID: ' + process.pid)
            }
        }
        const clusterduck = new (require('../src/core/clusterduck'))(argv.configFile, argv)
        if (clusterduck.isDuckling) {
            clusterduck.duckling()
        } else {
            if (command) {
                await command(clusterduck);
            } else {
                await clusterduck.run()
            }
        }
    } catch (err) {
        console.error(argv.verbose ? err : err.message)
        process.exit(1);
    }
})()
