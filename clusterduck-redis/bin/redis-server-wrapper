#!/usr/bin/env node

const util = require('util')
const daemonizeProcess = require('daemonize-process')
const pidFileClass = require('clusterduck/misc/pid-file')
const {spawn, exec} = require('child_process')
const yargs = require('yargs/yargs')
const {hideBin} = require('yargs/helpers')
const tcpPortUsed = require('tcp-port-used')
const fs = require('fs')

const start = (yargs, port) => {
    return new Promise(async (resolve, reject) => {
        const inUse = await tcpPortUsed.check(port)
        if (inUse) {
            resolve(false)
            return
        }
        const dir = util.format(yargs.dataDir, port)

        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, '0755', true);
        }

        const pidFile = new pidFileClass(util.format(yargs.pidFile, port))

        try {
            if (!pidFile.acquire()) {
                resolve(false)
                return
            }
        } catch (e) {
            reject(e)
            return
        }

        let args = [
            '--dir', dir,
            '--port', port,
        ]
        if (yargs.bind) {
            args = args.concat([
                '--bind', yargs.bind
            ]);
        }

        const redis = spawn(yargs.redisServerBin,
            args, {
                detached: true,
            })

        redis.on('error', err => {
            console.error(err)
        })

        let shutdown = false
        let exited = false
        process.on('SIGTERM', () => process.kill(process.pid, 'SIGINT'))

        process.on('SIGINT', (ev) => {
            if (shutdown) {
                return
            }
            shutdown = true
            exec(yargs.stopTrigger.replace('$CD_OPTS', process.env.CD_OPTS || ''), {
                env: Object.assign(process.env, {
                    'NODE': JSON.stringify({addr: yargs.addr + ':' + port})
                })
            }, (error, stdout, stderr) => {
                console.log(stdout, stderr)
                if (exited) {
                    process.exit(0)
                }
                setTimeout(() => {
                    redis.kill('SIGINT')
                }, 1000)
            })
        })

        redis.stdout.on('data', data => {
            data = data.toString()

            if (data.match(/\* Ready to accept connections/)) {

                process.title = 'redis-server-wrapper: ' + port
                exec(yargs.startTrigger.replace('$CD_OPTS', process.env.CD_OPTS || ''), {
                    env: Object.assign(process.env, {
                        'NODE': JSON.stringify({addr: yargs.addr + ':' + port})
                    })
                }, (error, stdout, stderr) => {
                    console.log(stdout, stderr)
                })

                resolve(redis)
            }
            console.log(data)
        })

        redis.stderr.on('data', data => {
            data = data.toString()
            console.error(data)
        })

        redis.on('exit', () => {
            exited = true
            process.kill(process.pid, 'SIGINT')
        })
    })
}

const Yargs = yargs(hideBin(process.argv)).strict()
    .option('daemonize', {
        alias: 'd',
        description: 'Daemonize',
        type: 'boolean',
        nargs: 0
    })
    .option('port-range', {
        description: 'Port range',
        type: 'string',
        default: '6379,6479',
    })
    .option('addr', {
        description: 'Addr',
        type: 'string',
        default: '127.0.0.1',
    })
    .option('config-file', {
        alias: 'c',
        default: '/etc/redis/redis.conf',
        description: 'Config file',
        type: 'string',
    })
    .option('redis-server-bin', {
        default: 'redis-server',
        description: 'Path to redis-server',
        type: 'string',
    })
    .option('data-dir', {
        default: '/var/lib/redis-%d',
        description: 'Data directory path pattern',
        type: 'string',
    })
    .option('pid-file', {
        default: '/var/run/redis-wrapper/redis-server-%d.pid',
        description: 'Pid file path pattern',
        type: 'string',
    })
    .option('start-trigger', {
        default: 'clusterduck $CD_OPTS insert-node $CLUSTER $NODE',
        description: 'Command to run on start',
        type: 'string',
    })
    .option('stop-trigger', {
        default: 'clusterduck $CD_OPTS  delete-node $CLUSTER $NODE',
        description: 'Command to run before stopping',
        type: 'string',
    })
    .command('stop [port]', 'stop an instance', yargs => {
        yargs
            .positional('port', {
                describe: 'port',
                demandOption: true
            })
    }, async yargs => {
        if (!yargs.port) {
            console.log('port is required')
            return
        }
        const pidFile = new pidFileClass(util.format(yargs.pidFile, yargs.port))
        try {
            pidFile.stop()
        } catch (e) {
            console.error(e.message)
        }
    })
    .command('start [port]', 'start an instance', yargs => {
        yargs
            .positional('port', {
                describe: 'port to start a Redis on',
                default: 0
            })
    }, async yargs => {
        yargs.daemonize && daemonizeProcess()

        let redis, port
        if (yargs.port) {
            try {
                redis = await start(yargs, yargs.port)
                port = yargs.port
                if (!redis) {
                    console.error(`Cannnot start a Redis instance on port ${yargs.port}`)
                    return
                }
            } catch (e) {
                console.log(e.message)
            }
        } else {
            const [minPort, maxPort] = yargs.portRange.split(',', 2).map(str => parseInt(str))
            for (let tryPort = minPort; tryPort <= maxPort; ++tryPort) {
                try {
                    redis = await start(yargs, tryPort)
                    if (redis) {
                        port = tryPort
                        break
                    }
                } catch (e) {
                    if (e.code === 'EACCES') {
                        console.log(e.message)
                        return
                    }
                }
            }
        }
        if (redis) {
            console.log('Started Redis at ' + port)
        }
    })
    .strict()
    .demandCommand()

Yargs.parse()
