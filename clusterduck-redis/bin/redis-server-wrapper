#!/usr/bin/env node

const util = require('util')
const daemonizeProcess = require('daemonize-process')
const pidFileClass = require('clusterduck/misc/pid-file')
const {spawn, exec} = require('child_process')
const yargs = require('yargs/yargs')
const {hideBin} = require('yargs/helpers')
const fs = require('fs')
const tcpPortUsed = require('tcp-port-used')
const path = require('path')

const start = (argv, port) => {
    return new Promise(async (resolve, reject) => {
            const inUse = await tcpPortUsed.check(port)
            if (inUse) {
                resolve(false)
                return
            }
            const dir = util.format(argv.dataDir, port)

            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, '0755', true);
            }

            const pidFile = new pidFileClass(util.format(argv.pidFile, port))

            try {
                if (!pidFile.acquire()) {
                    resolve(false)
                    return
                }
            } catch (e) {
                reject(e)
                return
            }

            let args = [
                argv.configFile,
                '--dir', dir,
                '--port', port,
                '--daemonize', 'no',
                '--logfile', ''
            ]
            if (argv.bind) {
                args = args.concat([
                    '--bind', yargs.bind
                ]);
            }

            console.log(JSON.stringify([argv.redisServerBin, ...args]) + "\n")
            const redis = spawn(argv.redisServerBin,
                args, {
                    detached: true,
                })

            redis.on('error', err => {
                console.error(err)
            })

            let shutdown = false
            let exited = false
            let started = false

            process.on('SIGINT', () => process.kill(process.pid, 'SIGTERM'))

            process.on('SIGTERM', () => {
                if (shutdown || !started) {
                    return
                }

                const cmd = argv.stopTrigger.replace('$CD_OPTS', process.env.CD_OPTS || '')
                console.log('STOP TRIGGER: ' + cmd)
                exec(cmd, {
                    env: Object.assign(process.env, {
                        'NODE': JSON.stringify({addr: argv.addr + ':' + port})
                    })
                }, (error, stdout, stderr) => {
                    console.log('STOP TRIGGER: ', stdout, stderr)
                    if (exited) {
                        process.exit(0)
                    }
                    setTimeout(() => {
                        redis.kill('SIGINT')
                    }, 1000)
                })

                shutdown = true
            })

            redis.stdout.on('data', data => {
                data = data.toString()
                console.log(data)

                if (data.match(/bind: Address already in use/)) {
                    resolve(false)
                } else if (data.match(/\* Ready to accept connections/)) {

                    process.title = 'redis-server-wrapper: ' + port
                    const cmd = argv.startTrigger.replace('$CD_OPTS', process.env.CD_OPTS || '')
                    console.log('START TRIGGER: ' + cmd)
                    started = true

                    const nodeParams = JSON.parse(process.env.CD_NODE_PARAMS || '{}')
                    exec(cmd, {
                        env: Object.assign(process.env, {
                            'NODE': JSON.stringify(Object.assign({}, nodeParams, {addr: argv.addr + ':' + port}))
                        })
                    }, (error, stdout, stderr) => {
                        console.log('START TRIGGER: ', stdout, stderr)
                    })
                    resolve(redis)
                }
            })

            redis.stderr.on('data', data => {
                data = data.toString()
                console.error(data)
            })

            redis.on('exit', () => {
                exited = true
                process.kill(process.pid, 'SIGINT')
            })
        }
    )
}

const Yargs = yargs(hideBin(process.argv)).strict()
    .option('daemonize', {
        alias: 'd',
        description: 'Daemonize',
        type: 'boolean',
        nargs: 0
    })
    .option('port-range', {
        description: 'Port range',
        type: 'string',
        default: '6379,6479',
    })
    .option('addr', {
        description: 'Addr',
        type: 'string',
        default: process.env.REDIS_ADDR || '127.0.0.1',
    })
    .option('config-file', {
        alias: 'c',
        default: '/etc/redis/redis.conf',
        description: 'Config file',
        type: 'string',
    })
    .option('redis-server-bin', {
        default: 'redis-server',
        description: 'Path to redis-server',
        type: 'string',
    })
    .option('data-dir', {
        default: '/var/lib/redis-%d',
        description: 'Data directory path pattern',
        type: 'string',
    })
    .option('pid-file', {
        default: '/var/run/redis-wrapper/redis-server-%d.pid',
        description: 'Pid file path pattern',
        type: 'string',
    })
    .option('start-trigger', {
        default: 'clusterduck $CD_OPTS insert-node $CLUSTER $NODE',
        description: 'Command to run on start',
        type: 'string',
    })
    .option('stop-trigger', {
        default: 'clusterduck $CD_OPTS delete-node $CLUSTER $NODE',
        description: 'Command to run before stopping',
        type: 'string',
    })
    .command('stop [port]', 'stop an instance', yargs => {
        yargs
            .positional('port', {
                describe: 'port',
                demandOption: true
            })
    }, async argv => {
        if (!argv.port) {
            console.log('port is required')
            return
        }
        const pidFile = new pidFileClass(util.format(argv.pidFile, argv.port))
        try {
            pidFile.stop()
        } catch (e) {
            console.error(e.message)
        }
    })
    .command('count-running', 'get the number of running instances', yargs => {
    }, async argv => {
        let counter = 0
        const [minPort, maxPort] = argv.portRange.split(',', 2).map(str => parseInt(str))
        for (let tryPort = minPort; tryPort <= maxPort; ++tryPort) {
            const pidFile = new pidFileClass(util.format(argv.pidFile, tryPort))
            if (pidFile.running) {
                ++counter
            }
        }
        process.stdout.write(counter.toString() + '\n')
    })
    .command('start [port]', 'start an instance', yargs => {
        yargs
            .positional('port', {
                describe: 'port to start a Redis on',
                default: 0
            })
    }, async argv => {
        argv.daemonize && daemonizeProcess()


        const pidFileDir = path.dirname(argv.pidFile);
        try {
            await fs.promises.stat(pidFileDir)
        } catch (e) {
            await fs.promises.mkdir(pidFileDir)
        }

        let redis, port
        if (argv.port) {
            try {
                redis = await start(argv, argv.port)
                port = argv.port
                if (!redis) {
                    console.error(`Cannnot start a Redis instance on port ${argv.port}`)
                    return
                }
            } catch (e) {
                console.log(e.message)
            }
        } else {
            const [minPort, maxPort] = argv.portRange.split(',', 2).map(str => parseInt(str))
            for (let tryPort = minPort; tryPort <= maxPort; ++tryPort) {
                try {
                    redis = await start(argv, tryPort)
                    if (redis) {
                        port = tryPort
                        break
                    }
                } catch (e) {
                    if (e.code === 'EACCES' || e.code === 'ENOENT') {
                        console.log(e.message)
                        return
                    }
                }
            }
            if (!redis) {
                console.error('Unable to start Redis. Your port range might be depleted.')
            }
        }
        if (redis) {
            console.log('Started Redis at ' + port)
        }
    })
    .strict()
    .demandCommand()

Yargs.parse()
