#!/usr/bin/env node
(async function () {

    const ClusterDuck = require('../core/clusterduck')
    const Duckling = require('../core/duckling')
    const daemonizeProcess = require('daemonize-process')
    const pidFileClass = require('../misc/pid-file')
    const md5 = require('md5')
    const yaml = require('js-yaml')
    const {v4: uuidv4} = require('uuid')

    const yargs = require('yargs')

    let command;

    const parser = yargs
        .option('daemonize', {
            alias: 'd',
            description: 'Daemonize',
            type: 'boolean',
        })
        .option('config-file', {
            alias: 'c',
            default: '/etc/clusterduck.yaml',
            description: 'Configuration file',
            type: 'string',
        });
    parser.option('pid-file', {
        description: 'Pid-file',
        default: function () {
            return '/var/run/clusterduck/clusterduck-' + md5(parser.parse().configFile) + '.pid'
        },
        type: 'string',
    })
        .strict()
        .option('experimental', {
            description: 'Allow using experimental modules',
            type: 'boolean',
            default: false
        })
        .option('verbose', {
            alias: 'v',
            description: 'Verbosity devel',
            type: 'string',
        })
        .command('export', 'export', yargs => {
            command = function (clusterduck) {
                return new Promise(async (resolve, reject) => {
                    const [remote, d] = await clusterduck.jayson.client()
                    const res = await remote.export();//.catch(reject)
                    process.stdout.write(yaml.dump(res));
                    d.end()
                })
            }
        })
        .command('stop', 'stop the server', yargs => {
        }, (argv) => {
            command = (clusterduck) => {
                new Promise((resolve, reject) => {
                    if (argv.verbose) console.info(`stop server`)
                    const pid = new pidFileClass(argv.pidFile)
                    try {
                        pid.stop()
                    } catch (err) {
                        console.error(argv.verbose ? err : err.message)
                    }
                    resolve()
                });
            };
        })
        .help()
        .alias('help', 'h');

    const argv = parser.parse()

    try {
        process.on('SIGTERM',  () => process.emit('exit', 'SIGTERM'))

        const clusterduck = new ClusterDuck(argv)
        if (command) {
            await command(clusterduck);
        } else {
            if (argv.daemonize && !Duckling.isDuckling) {
                const pid = new pidFileClass(argv.pidFile);
                pid.acquireOrThrow()
                daemonizeProcess()
                if (argv.verbose) {
                    console.log('[INFO] An instance has just started. PID: ' + process.pid)
                }
            }
            if (Duckling.isDuckling) {
                clusterduck.runDuckling()
            } else {
                clusterduck.id = uuidv4()
                clusterduck.set_config(require('../misc/config')(argv.configFile))

                await clusterduck.run()
            }
        }
    } catch (err) {
        console.error(argv.verbose ? err : err.message)
        process.exit(1)
    }
})()
